# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gaussianBlur
else:
    import _gaussianBlur

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gaussianBlur.delete_SwigPyIterator

    def value(self):
        return _gaussianBlur.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gaussianBlur.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gaussianBlur.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gaussianBlur.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gaussianBlur.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gaussianBlur.SwigPyIterator_copy(self)

    def next(self):
        return _gaussianBlur.SwigPyIterator_next(self)

    def __next__(self):
        return _gaussianBlur.SwigPyIterator___next__(self)

    def previous(self):
        return _gaussianBlur.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gaussianBlur.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gaussianBlur.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gaussianBlur.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gaussianBlur.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gaussianBlur.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gaussianBlur.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gaussianBlur.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gaussianBlur:
_gaussianBlur.SwigPyIterator_swigregister(SwigPyIterator)

class VecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gaussianBlur.VecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gaussianBlur.VecDouble___nonzero__(self)

    def __bool__(self):
        return _gaussianBlur.VecDouble___bool__(self)

    def __len__(self):
        return _gaussianBlur.VecDouble___len__(self)

    def __getslice__(self, i, j):
        return _gaussianBlur.VecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gaussianBlur.VecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gaussianBlur.VecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gaussianBlur.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gaussianBlur.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gaussianBlur.VecDouble___setitem__(self, *args)

    def pop(self):
        return _gaussianBlur.VecDouble_pop(self)

    def append(self, x):
        return _gaussianBlur.VecDouble_append(self, x)

    def empty(self):
        return _gaussianBlur.VecDouble_empty(self)

    def size(self):
        return _gaussianBlur.VecDouble_size(self)

    def swap(self, v):
        return _gaussianBlur.VecDouble_swap(self, v)

    def begin(self):
        return _gaussianBlur.VecDouble_begin(self)

    def end(self):
        return _gaussianBlur.VecDouble_end(self)

    def rbegin(self):
        return _gaussianBlur.VecDouble_rbegin(self)

    def rend(self):
        return _gaussianBlur.VecDouble_rend(self)

    def clear(self):
        return _gaussianBlur.VecDouble_clear(self)

    def get_allocator(self):
        return _gaussianBlur.VecDouble_get_allocator(self)

    def pop_back(self):
        return _gaussianBlur.VecDouble_pop_back(self)

    def erase(self, *args):
        return _gaussianBlur.VecDouble_erase(self, *args)

    def __init__(self, *args):
        _gaussianBlur.VecDouble_swiginit(self, _gaussianBlur.new_VecDouble(*args))

    def push_back(self, x):
        return _gaussianBlur.VecDouble_push_back(self, x)

    def front(self):
        return _gaussianBlur.VecDouble_front(self)

    def back(self):
        return _gaussianBlur.VecDouble_back(self)

    def assign(self, n, x):
        return _gaussianBlur.VecDouble_assign(self, n, x)

    def resize(self, *args):
        return _gaussianBlur.VecDouble_resize(self, *args)

    def insert(self, *args):
        return _gaussianBlur.VecDouble_insert(self, *args)

    def reserve(self, n):
        return _gaussianBlur.VecDouble_reserve(self, n)

    def capacity(self):
        return _gaussianBlur.VecDouble_capacity(self)
    __swig_destroy__ = _gaussianBlur.delete_VecDouble

# Register VecDouble in _gaussianBlur:
_gaussianBlur.VecDouble_swigregister(VecDouble)

class VecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gaussianBlur.VecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gaussianBlur.VecVecDouble___nonzero__(self)

    def __bool__(self):
        return _gaussianBlur.VecVecDouble___bool__(self)

    def __len__(self):
        return _gaussianBlur.VecVecDouble___len__(self)

    def __getslice__(self, i, j):
        return _gaussianBlur.VecVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gaussianBlur.VecVecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gaussianBlur.VecVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gaussianBlur.VecVecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gaussianBlur.VecVecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gaussianBlur.VecVecDouble___setitem__(self, *args)

    def pop(self):
        return _gaussianBlur.VecVecDouble_pop(self)

    def append(self, x):
        return _gaussianBlur.VecVecDouble_append(self, x)

    def empty(self):
        return _gaussianBlur.VecVecDouble_empty(self)

    def size(self):
        return _gaussianBlur.VecVecDouble_size(self)

    def swap(self, v):
        return _gaussianBlur.VecVecDouble_swap(self, v)

    def begin(self):
        return _gaussianBlur.VecVecDouble_begin(self)

    def end(self):
        return _gaussianBlur.VecVecDouble_end(self)

    def rbegin(self):
        return _gaussianBlur.VecVecDouble_rbegin(self)

    def rend(self):
        return _gaussianBlur.VecVecDouble_rend(self)

    def clear(self):
        return _gaussianBlur.VecVecDouble_clear(self)

    def get_allocator(self):
        return _gaussianBlur.VecVecDouble_get_allocator(self)

    def pop_back(self):
        return _gaussianBlur.VecVecDouble_pop_back(self)

    def erase(self, *args):
        return _gaussianBlur.VecVecDouble_erase(self, *args)

    def __init__(self, *args):
        _gaussianBlur.VecVecDouble_swiginit(self, _gaussianBlur.new_VecVecDouble(*args))

    def push_back(self, x):
        return _gaussianBlur.VecVecDouble_push_back(self, x)

    def front(self):
        return _gaussianBlur.VecVecDouble_front(self)

    def back(self):
        return _gaussianBlur.VecVecDouble_back(self)

    def assign(self, n, x):
        return _gaussianBlur.VecVecDouble_assign(self, n, x)

    def resize(self, *args):
        return _gaussianBlur.VecVecDouble_resize(self, *args)

    def insert(self, *args):
        return _gaussianBlur.VecVecDouble_insert(self, *args)

    def reserve(self, n):
        return _gaussianBlur.VecVecDouble_reserve(self, n)

    def capacity(self):
        return _gaussianBlur.VecVecDouble_capacity(self)
    __swig_destroy__ = _gaussianBlur.delete_VecVecDouble

# Register VecVecDouble in _gaussianBlur:
_gaussianBlur.VecVecDouble_swigregister(VecVecDouble)

class VecVecVecDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gaussianBlur.VecVecVecDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gaussianBlur.VecVecVecDouble___nonzero__(self)

    def __bool__(self):
        return _gaussianBlur.VecVecVecDouble___bool__(self)

    def __len__(self):
        return _gaussianBlur.VecVecVecDouble___len__(self)

    def __getslice__(self, i, j):
        return _gaussianBlur.VecVecVecDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gaussianBlur.VecVecVecDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gaussianBlur.VecVecVecDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gaussianBlur.VecVecVecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gaussianBlur.VecVecVecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gaussianBlur.VecVecVecDouble___setitem__(self, *args)

    def pop(self):
        return _gaussianBlur.VecVecVecDouble_pop(self)

    def append(self, x):
        return _gaussianBlur.VecVecVecDouble_append(self, x)

    def empty(self):
        return _gaussianBlur.VecVecVecDouble_empty(self)

    def size(self):
        return _gaussianBlur.VecVecVecDouble_size(self)

    def swap(self, v):
        return _gaussianBlur.VecVecVecDouble_swap(self, v)

    def begin(self):
        return _gaussianBlur.VecVecVecDouble_begin(self)

    def end(self):
        return _gaussianBlur.VecVecVecDouble_end(self)

    def rbegin(self):
        return _gaussianBlur.VecVecVecDouble_rbegin(self)

    def rend(self):
        return _gaussianBlur.VecVecVecDouble_rend(self)

    def clear(self):
        return _gaussianBlur.VecVecVecDouble_clear(self)

    def get_allocator(self):
        return _gaussianBlur.VecVecVecDouble_get_allocator(self)

    def pop_back(self):
        return _gaussianBlur.VecVecVecDouble_pop_back(self)

    def erase(self, *args):
        return _gaussianBlur.VecVecVecDouble_erase(self, *args)

    def __init__(self, *args):
        _gaussianBlur.VecVecVecDouble_swiginit(self, _gaussianBlur.new_VecVecVecDouble(*args))

    def push_back(self, x):
        return _gaussianBlur.VecVecVecDouble_push_back(self, x)

    def front(self):
        return _gaussianBlur.VecVecVecDouble_front(self)

    def back(self):
        return _gaussianBlur.VecVecVecDouble_back(self)

    def assign(self, n, x):
        return _gaussianBlur.VecVecVecDouble_assign(self, n, x)

    def resize(self, *args):
        return _gaussianBlur.VecVecVecDouble_resize(self, *args)

    def insert(self, *args):
        return _gaussianBlur.VecVecVecDouble_insert(self, *args)

    def reserve(self, n):
        return _gaussianBlur.VecVecVecDouble_reserve(self, n)

    def capacity(self):
        return _gaussianBlur.VecVecVecDouble_capacity(self)
    __swig_destroy__ = _gaussianBlur.delete_VecVecVecDouble

# Register VecVecVecDouble in _gaussianBlur:
_gaussianBlur.VecVecVecDouble_swigregister(VecVecVecDouble)


def GaussianBlur(image, kernel=1):
    return _gaussianBlur.GaussianBlur(image, kernel)


